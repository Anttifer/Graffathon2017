#include "Mesh4D.h"

Mesh4D Mesh4D::pentachoron_wireframe(void)
{
	Mesh4D mesh;

	float invsqrt10 = 1.0f / std::sqrt(10.0f);
	float invsqrt6  = 1.0f / std::sqrt(6.0f);
	float invsqrt3  = 1.0f / std::sqrt(6.0f);

	Eigen::Vector4f a = {invsqrt10, invsqrt6, invsqrt3, 1.0f};
	Eigen::Vector4f b = {invsqrt10, invsqrt6, invsqrt3, -1.0f};
	Eigen::Vector4f c = {invsqrt10, invsqrt6, -2.0f * invsqrt3, 0.0f};
	Eigen::Vector4f d = {invsqrt10, -std::sqrt(3.0f/2.0f), 0.0f, 0.0f};
	Eigen::Vector4f e = {-2.0f * std::sqrt(2.0f/5.0f), 0.0f, 0.0f, 0.0f};

	mesh.positions_ = {
		a, b, a, c, a, d, a, e,
		b, c, b, d, b, e,
		c, d, c,e,
		d, e
	};

	return mesh;
}

Mesh4D Mesh4D::octachoron_wireframe(void)
{
	Mesh4D mesh;

	mesh.positions_ = {
		// X-lines.
		{-1, -1, -1, -1}, {1, -1, -1, -1},
		{-1,  1, -1, -1}, {1,  1, -1, -1},
		{-1, -1,  1, -1}, {1, -1,  1, -1},
		{-1,  1,  1, -1}, {1,  1,  1, -1},
	
		{-1, -1, -1, 1}, {1, -1, -1, 1},
		{-1,  1, -1, 1}, {1,  1, -1, 1},
		{-1, -1,  1, 1}, {1, -1,  1, 1},
		{-1,  1,  1, 1}, {1,  1,  1, 1},

		// Y-lines.
		{-1, -1, -1, -1}, {-1, 1, -1, -1},
		{ 1, -1, -1, -1}, { 1, 1, -1, -1},
		{-1, -1,  1, -1}, {-1, 1,  1, -1},
		{ 1, -1,  1, -1}, { 1, 1,  1, -1},

		{-1, -1, -1, 1}, {-1, 1, -1, 1},
		{ 1, -1, -1, 1}, { 1, 1, -1, 1},
		{-1, -1,  1, 1}, {-1, 1,  1, 1},
		{ 1, -1,  1, 1}, { 1, 1,  1, 1},

		// Z-lines.
		{-1, -1, -1, -1}, {-1, -1, 1, -1},
		{ 1, -1, -1, -1}, { 1, -1, 1, -1},
		{-1,  1, -1, -1}, {-1,  1, 1, -1},
		{ 1,  1, -1, -1}, { 1,  1, 1, -1},

		{-1, -1, -1, 1}, {-1, -1, 1, 1},
		{ 1, -1, -1, 1}, { 1, -1, 1, 1},
		{-1,  1, -1, 1}, {-1,  1, 1, 1},
		{ 1,  1, -1, 1}, { 1,  1, 1, 1},

		// W-lines.
		{-1, -1, -1, -1}, {-1, -1, -1, 1},
		{ 1, -1, -1, -1}, { 1, -1, -1, 1},
		{-1,  1, -1, -1}, {-1,  1, -1, 1},
		{ 1,  1, -1, -1}, { 1,  1, -1, 1},

		{-1, -1, 1, -1}, {-1, -1, 1, 1},
		{ 1, -1, 1, -1}, { 1, -1, 1, 1},
		{-1,  1, 1, -1}, {-1,  1, 1, 1},
		{ 1,  1, 1, -1}, { 1,  1, 1, 1}
	};

	return mesh;
}
